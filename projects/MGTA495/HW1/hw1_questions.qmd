---
title: "A Replication of Karlan and List (2007)"
author: "Wesley Covey"
date: 2025-04-23
callout-appearance: minimal # this hides the blue "i" icon on .callout-notes
---


## Introduction

Dean Karlan at Yale and John List at the University of Chicago conducted a field experiment to test the effectiveness of different fundraising letters. They sent out 50,000 fundraising letters to potential donors, randomly assigning each letter to one of three treatments: a standard letter, a matching grant letter, or a challenge grant letter. They published the results of this experiment in the _American Economic Review_ in 2007. The article and supporting data are available from the [AEA website](https://www.aeaweb.org/articles?id=10.1257/aer.97.5.1774) and from Innovations for Poverty Action as part of [Harvard's Dataverse](https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/27853&version=4.2).

_to do: expand on the description of the experiment._

This project seeks to replicate their results.


## Data

### Description

_todo: Read the data into R/Python and describe the data_

```{python}
#| echo: false
import pandas as pd
import numpy as np
from scipy.stats import ttest_ind
import pyrsm as rsm
import statsmodels.api as sm
import statsmodels.formula.api as smf
import matplotlib.pyplot as plt
from cycler import cycler

plt.rcParams['axes.prop_cycle'] = cycler(color=['#375a7f']) 
```


```{python}
df = pd.read_stata('karlan_list_2007.dta')
```

:::: {.callout-note collapse="true"}
### Variable Definitions

| Variable             | Description                                                         |
|----------------------|---------------------------------------------------------------------|
| `treatment`          | Treatment                                                           |
| `control`            | Control                                                             |
| `ratio`              | Match ratio                                                         |
| `ratio2`             | 2:1 match ratio                                                     |
| `ratio3`             | 3:1 match ratio                                                     |
| `size`               | Match threshold                                                     |
| `size25`             | \$25,000 match threshold                                            |
| `size50`             | \$50,000 match threshold                                            |
| `size100`            | \$100,000 match threshold                                           |
| `sizeno`             | Unstated match threshold                                            |
| `ask`                | Suggested donation amount                                           |
| `askd1`              | Suggested donation was highest previous contribution                |
| `askd2`              | Suggested donation was 1.25 x highest previous contribution         |
| `askd3`              | Suggested donation was 1.50 x highest previous contribution         |
| `ask1`               | Highest previous contribution (for suggestion)                      |
| `ask2`               | 1.25 x highest previous contribution (for suggestion)               |
| `ask3`               | 1.50 x highest previous contribution (for suggestion)               |
| `amount`             | Dollars given                                                       |
| `gave`               | Gave anything                                                       |
| `amountchange`       | Change in amount given                                              |
| `hpa`                | Highest previous contribution                                       |
| `ltmedmra`           | Small prior donor: last gift was less than median \$35              |
| `freq`               | Number of prior donations                                           |
| `years`              | Number of years since initial donation                              |
| `year5`              | At least 5 years since initial donation                             |
| `mrm2`               | Number of months since last donation                                |
| `dormant`            | Already donated in 2005                                             |
| `female`             | Female                                                              |
| `couple`             | Couple                                                              |
| `state50one`         | State tag: 1 for one observation of each of 50 states; 0 otherwise  |
| `nonlit`             | Nonlitigation                                                       |
| `cases`              | Court cases from state in 2004-5 in which organization was involved |
| `statecnt`           | Percent of sample from state                                        |
| `stateresponse`      | Proportion of sample from the state who gave                        |
| `stateresponset`     | Proportion of treated sample from the state who gave                |
| `stateresponsec`     | Proportion of control sample from the state who gave                |
| `stateresponsetminc` | stateresponset - stateresponsec                                     |
| `perbush`            | State vote share for Bush                                           |
| `close25`            | State vote share for Bush between 47.5% and 52.5%                   |
| `red0`               | Red state                                                           |
| `blue0`              | Blue state                                                          |
| `redcty`             | Red county                                                          |
| `bluecty`            | Blue county                                                         |
| `pwhite`             | Proportion white within zip code                                    |
| `pblack`             | Proportion black within zip code                                    |
| `page18_39`          | Proportion age 18-39 within zip code                                |
| `ave_hh_sz`          | Average household size within zip code                              |
| `median_hhincome`    | Median household income within zip code                             |
| `powner`             | Proportion house owner within zip code                              |
| `psch_atlstba`       | Proportion who finished college within zip code                     |
| `pop_propurban`      | Proportion of population urban within zip code                      |

::::


### Balance Test 

As an ad hoc test of the randomization mechanism, I provide a series of tests that compare aspects of the treatment and control groups to assess whether they are statistically significantly different from one another.

_todo: test a few variables other than the key outcome variables (for example, test months since last donation) to see if the treatment and control groups are statistically significantly different at the 95% confidence level. For at least one variable, perform the test as both t-test (use the formula in the class slides) and separately as a linear regression (regress for example mrm2 on treatment); confirm both methods yield the exact same results. It might be helpful to compare parts of your analysis to Table 1 in the paper. Be sure to comment on your results (hint: why is Table 1 included in the paper)._

```{python}
test_variables = ['hpa', 'freq', 'female', 'redcty', 'bluecty']

for var in test_variables:
    control = df.loc[df.treatment == 0, var].dropna()
    treatment = df.loc[df.treatment == 1, var].dropna()

    t_stat, pval = ttest_ind(control, treatment)
    print(f'''
T-test results for {var}:
t-statistic: {t_stat}
p-value: {pval}

At the 95% confidence level, we {pval < 0.05 and "reject" or "fail to reject"} the null hypothesis that the mean value from the two samples are equal.''')

    m = rsm.model.regress(data=df,
                      rvar=var,
                      evar=['treatment'],
    )
    print(f'Linear regression results for {var}:')
    print(m.summary(main=False))
```


## Experimental Results

### Charitable Contribution Made

First, I analyze whether matched donations lead to an increased response rate of making a donation. 

_todo: make a barplot with two bars. Each bar is the proportion of people who donated. One bar for treatment and one bar for control._

_todo: run a t-test between the treatment and control groups on the binary outcome of whether any charitable donation was made (you can do this as a bivariate linear regression if you want). It may help to confirm your calculations match Table 2a Panel A. Report your statistical results and interpret them in the context of the experiment (e.g., if you found a difference with a small p-value or something that was statistically significant at some threshold, what have you learned about human behavior? Use mostly English words, not numbers or stats, to explain your finding.)_

_todo: run a probit regression where the outcome variable is whether any charitable donation was made and the explanatory variable is assignment to treatment or control._ 

_NOTE: Linear regression results appear replicate Table 3 column 1 in the paper. Probit results do not, despite Table 3 indicating its results come from probit regressions..._

```{python}
gave_df = df.groupby('treatment')['gave'].mean()
gave_df.index = gave_df.index.map({0: 'Control', 1: 'Treatment'})

plt.bar(gave_df.index, gave_df.values)
plt.title('Proportion Who Donated by Group')
plt.xlabel('Group')
plt.ylabel('Proportion Who Donated')
plt.show()


control = df.loc[df.treatment == 0, 'gave'].dropna()
treatment = df.loc[df.treatment == 1, 'gave'].dropna()

t_stat, pval = ttest_ind(control, treatment)

print(f'''
T-test results:
t-statistic: {t_stat}
p-value: {pval}

At the 95% confidence level, we {pval < 0.05 and "reject" or "fail to reject"} the null hypothesis that the response rate of the two samples are equal.''')

probit_model = smf.probit('gave ~ treatment', data=df).fit()
print('Probit Regression Results:')
print(probit_model.summary())
```



### Differences between Match Rates

Next, I assess the effectiveness of different sizes of matched donations on the response rate.

_todo: Use a series of t-tests to test whether the size of the match ratio has an effect on whether people donate or not. For example, does the 2:1 match rate lead increase the likelihood that someone donates as compared to the 1:1 match rate? Do your results support the "figures suggest" comment the authors make on page 8?_

_todo: Assess the same issue using a regression. Specifically, create the variable `ratio1` then regress `gave` on `ratio1`, `ratio2`, and `ratio3` (or alternatively, regress `gave` on the categorical variable `ratio`). Interpret the coefficients and their statistical precision._

_todo: Calculate the response rate difference between the 1:1 and 2:1 match ratios and the 2:1 and 3:1 ratios.  Do this directly from the data, and do it by computing the differences in the fitted coefficients of the previous regression. what do you conclude regarding the effectiveness of different sizes of matched donations?_

```{python}
df['ratio'] = df['ratio'].astype(str)
df['ratio'] = pd.Categorical(df['ratio'], categories=['Control', '1', '2', '3'], ordered=True)

ratio_df = df.groupby('ratio')['gave'].mean()
display(ratio_df)

for ratio in ['1', '2', '3']:
    g1 = ratio
    for alt_ratio in ['1', '2', '3']:
        if g1 == alt_ratio:
            continue
        g2 = alt_ratio

        group1 = df.loc[df.ratio == g1, 'gave'].dropna()
        group2 = df.loc[df.ratio == g2, 'gave'].dropna()

        t_stat, pval = ttest_ind(group1, group2)
        print(f'''
Response rate for {g1}:1 - {group1.mean()}
Response rate for {g2}:1 - {group2.mean()}
t-statistic: {t_stat}
p-value: {pval}

At the 95% confidence level, we {pval < 0.05 and "reject" or "fail to reject"} the null hypothesis that the response rate of ratio {g1}:1 and {g2}:1 are equal.''')


probit_model2 = smf.probit('gave ~ ratio', data=df).fit()
print(probit_model2.summary())


treatment_df = df.loc[df.treatment == 1].copy()
treatment_df = treatment_df[['gave', 'ratio']].dropna()
treatment_df['ratio'] = pd.Categorical(
    treatment_df['ratio'], 
    categories=['1', '2', '3'], 
    ordered=True
)

probit_model3 = smf.probit('gave ~ ratio', data=treatment_df).fit()
print(probit_model3.summary())


print(f'Difference between 3:1 response rate and 2:1 response rate: {ratio_df['3'] - ratio_df['2']}')
print(f'Difference between 2:1 response rate and 1:1 response rate: {ratio_df['2'] - ratio_df['1']}')

mfx = probit_model2.get_margeff()
marginal_effects = mfx.margeff
diff_3_vs_2 = marginal_effects[2] - marginal_effects[1]
diff_2_vs_1 = marginal_effects[1] - marginal_effects[0]


print(f"Estimated difference between 3:1 response rate and 2:1 response rate:: {diff_3_vs_2:.4f}")
print(f"Estimated difference between 2:1 response rate and 1:1 response rate: {diff_2_vs_1:.4f}")

```


### Size of Charitable Contribution

In this subsection, I analyze the effect of the size of matched donation on the size of the charitable contribution.

_todo: Calculate a t-test or run a bivariate linear regression of the donation amount on the treatment status. What do we learn from doing this analysis?_

_todo: now limit the data to just people who made a donation and repeat the previous analysis. This regression allows you to analyze how much respondents donate conditional on donating some positive amount. Interpret the regression coefficients -- what did we learn? Does the treatment coefficient have a causal interpretation?_ 

_todo: Make two plots: one for the treatment group and one for the control. Each plot should be a histogram of the donation amounts only among people who donated. Add a red vertical bar or some other annotation to indicate the sample average for each plot._

```{python}
control = df.loc[df.treatment == 0, 'amount'].dropna()
treatment = df.loc[df.treatment == 1, 'amount'].dropna()

t_stat, pval = ttest_ind(control, treatment)

print(f'''
T-test results:
t-statistic: {t_stat}
p-value: {pval}

At the 95% confidence level, we {pval < 0.05 and "reject" or "fail to reject"} the null hypothesis that the donation amount of the two samples are equal.''')

control = df.loc[(df.treatment == 0) & (df.gave == 1), 'amount'].dropna()
treatment = df.loc[(df.treatment == 1) & (df.gave == 1), 'amount'].dropna()

t_stat, pval = ttest_ind(control, treatment)

print(f'''
T-test results:
t-statistic: {t_stat}
p-value: {pval}

At the 95% confidence level, we {pval < 0.05 and "reject" or "fail to reject"} the null hypothesis that the donation amount of the two samples are equal.''')

fig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)
axes[0].set_ylabel("Frequency")

for val in [0, 1]:
    subset = df.loc[(df.gave == 1) & (df.treatment == val)].copy()
    axes[val].hist(subset['amount'], bins=10)
    axes[val].axhline(y=subset['amount'].mean(), color='r', linestyle='--', label='Mean')
    axes[val].legend()
    axes[val].set_title(f'Amount Donated for {"Treatment" if val == 1 else "Control"} Group')
    axes[val].set_xlabel("Dollars Donated")

plt.tight_layout()
plt.show()
```


## Simulation Experiment

As a reminder of how the t-statistic "works," in this section I use simulation to demonstrate the Law of Large Numbers and the Central Limit Theorem.

Suppose the true distribution of respondents who do not get a charitable donation match is Bernoulli with probability p=0.018 that a donation is made. 

Further suppose that the true distribution of respondents who do get a charitable donation match of any size is Bernoulli with probability p=0.022 that a donation is made.

### Law of Large Numbers

_to do:  Simulate 10,000 draws from the control distribution and 10,000 draws from the treatment distribution. You'll then calculate a vector of 10,000 differences, and then you'll plot the cumulative average of that vector of differences. This average will likely be "noisey" when only averaging a few numbers, but should "settle down" and approximate the treatment effect (0.004 = 0.022 - 0.018) as the sample size gets large. Explain the chart to the reader._

```{python}
ctr_p = 0.018
trt_p = 0.022

np.random.seed(12)
sim_ctr = np.random.binomial(n=1, p=ctr_p, size=10_000)
sim_trt = np.random.binomial(n=1, p=trt_p, size=10_000)

sim_diff = sim_trt - sim_ctr
cumulative_avg = np.cumsum(sim_diff) / np.arange(1, len(sim_diff) + 1)

plt.figure(figsize=(10, 5))
plt.plot(cumulative_avg)
plt.axhline(y=trt_p - ctr_p, color='red', linestyle='--', label='True Effect (0.004)')
plt.title('Cumulative Average of Simulated Treatment Effect')
plt.xlabel('Number of Simulations')
plt.ylabel('Cumulative Average Difference (Treatment - Control)')
plt.legend()
plt.show()
```

### Central Limit Theorem

_to do: Make 4 histograms at sample sizes 50, 200, 500, and 1000.  To do this for a sample size of e.g. 50, take 50 draws from each of the control and treatment distributions, and calculate the average difference between those draws. Then repeat that process 999 more times so that you have 1000 averages. Plot the histogram of those averages. The repeat for the other 3 histograms. Explain this sequence of histograms and its relationship to the central limit theorem to the reader._

```{python}
fig, axes = plt.subplots(2, 2, figsize=(12, 10), sharey=True, sharex=True)
axes = axes.flatten()
axes[0].set_ylabel("Frequency")
axes[2].set_ylabel("Frequency")

for ax, size in enumerate([50, 200, 500, 1000]):
    samples = []
    for i in range(1000):
        sim_ctr = np.random.binomial(n=1, p=ctr_p, size=size)
        sim_trt = np.random.binomial(n=1, p=trt_p, size=size)

        sim_diff_mean = sim_trt.mean() - sim_ctr.mean()
        samples.append(sim_diff_mean)
    
    axes[ax].hist(samples, bins=10)
    axes[ax].axvline(x=trt_p - ctr_p, color='red', linestyle='--', label='True Effect (0.004)')
    axes[ax].legend()
    axes[ax].set_title(f'Average Difference from {size} Draws')
    axes[ax].set_xlabel("Difference in Response Rate")


plt.tight_layout()
plt.show()
```




